generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "linux-musl"]
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgres"
  url        = env("DATABASE_URL")
  extensions = [citext]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.Citext
  email     String   @unique @db.Citext
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  cart      Cart?
  // contacts  Contact[]
  orders    Order[]
}

// model Contact {
//   id             Int                @id @default(autoincrement())
//   name           String
//   defaultContact Boolean            @default(false)
//   phone          String?
//   email          String?
//   userId         Int
//   user           User               @relation(fields: [userId], references: [id], onDelete: Cascade)
//   duplicates     ContactDuplicate[]
// }

// model ContactDuplicate {
//   id        Int      @id @default(autoincrement())
//   name      String
//   phone     String?
//   email     String?
//   orderId   Int?     @unique
//   order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
//   contactId Int?
//   contact   Contact? @relation(fields: [contactId], references: [id])
// }

model Manufacturer {
  id            Int            @id @default(autoincrement())
  name          String         @db.Citext
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  products      Product[]
  orderProducts OrderProduct[]

  @@unique(name)
}

model ProductCategory {
  id               Int               @id @default(autoincrement())
  name             String            @unique @db.Citext
  depthIndex       Int               @default(0)
  parentCategoryId Int?
  parentCategory   ProductCategory?  @relation("NestedCategory", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  childCategories  ProductCategory[] @relation("NestedCategory")
  products         Product[]
  orderProduct     OrderProduct[]
}

model Product {
  id                Int              @id @default(autoincrement())
  name              String           @db.Citext
  price             Float
  active            Boolean          @default(true)
  stock             Int              @default(0)
  image             String?
  countryOfOrigin   String?
  description       String?
  color             String?
  weight            String?
  size              String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  manufacturerId    Int?
  manufacturer      Manufacturer?    @relation(fields: [manufacturerId], references: [id], onDelete: Cascade)
  productCategoryId Int?
  productCategory   ProductCategory? @relation(fields: [productCategoryId], references: [id])
  cartProducts      CartProduct[]
  orderProducts     OrderProduct[]
}

model Cart {
  id           Int           @id @default(autoincrement())
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartProducts CartProduct[]
}

model CartProduct {
  id        Int     @id @default(autoincrement())
  quantity  Int
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model OrderProduct {
  id                  Int              @id @default(autoincrement())
  createdAt           DateTime         @default(now())
  quantity            Int
  price               Float
  name                String
  image               String?
  countryOfOrigin     String?
  description         String?
  color               String?
  weight              String?
  size                String?
  orderId             Int
  order               Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId           Int?
  product             Product?         @relation(fields: [productId], references: [id])
  manufacturerName    String?
  manufacturerId      Int?
  manufacturer        Manufacturer?    @relation(fields: [manufacturerId], references: [id])
  productCategoryName String?
  productCategoryId   Int?
  productCategory     ProductCategory? @relation(fields: [productCategoryId], references: [id])
}

model Order {
  id           Int            @id @default(autoincrement())
  status       OrderStatus    @default(PENDING)
  totalAmount  Float          @default(0)
  cancelReason String?
  canceledAt   DateTime?
  completedAt  DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  userId       Int?
  user         User?          @relation(fields: [userId], references: [id])
  // contactDuplicate ContactDuplicate?
  products     OrderProduct[]
  // shippedAt           DateTime?
  // paidAt              DateTime?
  // paymentStatus       String              @default("PENDING")
  // orderPaymentStatus  OrderPaymentStatus  @relation(fields: [status], references: [status])
  // deliveryStatus      String              @default("PENDING")
  // orderDeliveryStatus OrderDeliveryStatus @relation(fields: [status], references: [status])
  // orderDelivery                OrderDelivery?
  // deliveryFee      Float             @default(0)
  // orderPayment                  OrderPayment?
}

// enums
enum UserRole {
  USER
  SUPER_ADMIN
}

enum OrderStatus {
  COMPLETED
  PENDING
  CANCELED
}

// enum PaymentStatus {
//   PAID
//   PENDING
//   REFUNDED
// }

// enum DeliveryStatus {
//   FULFILLED
//   UNFULFILLED
// }
